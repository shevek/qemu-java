package org.anarres.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import org.anarres.qemu.qapi.common.*;

/**
 * Autogenerated class.
 *
 * <pre>QApiUnionDescriptor{name=CpuInfoFast, discriminator=target, data={aarch64=CpuInfoOther, alpha=CpuInfoOther, arm=CpuInfoOther, cris=CpuInfoOther, hppa=CpuInfoOther, i386=CpuInfoOther, lm32=CpuInfoOther, m68k=CpuInfoOther, microblaze=CpuInfoOther, microblazeel=CpuInfoOther, mips=CpuInfoOther, mips64=CpuInfoOther, mips64el=CpuInfoOther, mipsel=CpuInfoOther, moxie=CpuInfoOther, nios2=CpuInfoOther, or1k=CpuInfoOther, ppc=CpuInfoOther, ppc64=CpuInfoOther, ppcemb=CpuInfoOther, riscv32=CpuInfoOther, riscv64=CpuInfoOther, s390x=CpuInfoS390, sh4=CpuInfoOther, sh4eb=CpuInfoOther, sparc=CpuInfoOther, sparc64=CpuInfoOther, tricore=CpuInfoOther, unicore32=CpuInfoOther, x86_64=CpuInfoOther, xtensa=CpuInfoOther, xtensaeb=CpuInfoOther}, innerTypes=null, fields=null, base={cpu-index=int, qom-path=str, thread-id=int, *props=CpuInstanceProperties, arch=CpuInfoArch, target=SysEmuTarget}, discriminatorField=null}</pre>
 */
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class CpuInfoFast extends CpuInfoFastBase implements QApiUnion {

	// union {
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("aarch64")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther aarch64;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("alpha")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther alpha;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("arm")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther arm;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("cris")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther cris;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("hppa")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther hppa;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("i386")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther i386;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("lm32")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther lm32;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("m68k")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther m68k;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("microblaze")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther microblaze;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("microblazeel")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther microblazeel;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("mips")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther mips;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("mips64")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther mips64;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("mips64el")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther mips64el;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("mipsel")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther mipsel;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("moxie")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther moxie;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("nios2")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther nios2;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("or1k")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther or1k;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("ppc")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther ppc;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("ppc64")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther ppc64;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("ppcemb")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther ppcemb;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("riscv32")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther riscv32;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("riscv64")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther riscv64;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("s390x")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoS390 s390x;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("sh4")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther sh4;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("sh4eb")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther sh4eb;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("sparc")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther sparc;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("sparc64")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther sparc64;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("tricore")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther tricore;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("unicore32")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther unicore32;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("x86_64")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther x86_64;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("xtensa")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther xtensa;
	@SuppressFBWarnings("NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR")
	@JsonProperty("xtensaeb")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther xtensaeb;
	// }

	@Nonnull
	public static CpuInfoFast aarch64(@Nonnull CpuInfoOther aarch64) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.aarch64;
		self.aarch64 = aarch64;
		return self;
	}

	@Nonnull
	public static CpuInfoFast alpha(@Nonnull CpuInfoOther alpha) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.alpha;
		self.alpha = alpha;
		return self;
	}

	@Nonnull
	public static CpuInfoFast arm(@Nonnull CpuInfoOther arm) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.arm;
		self.arm = arm;
		return self;
	}

	@Nonnull
	public static CpuInfoFast cris(@Nonnull CpuInfoOther cris) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.cris;
		self.cris = cris;
		return self;
	}

	@Nonnull
	public static CpuInfoFast hppa(@Nonnull CpuInfoOther hppa) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.hppa;
		self.hppa = hppa;
		return self;
	}

	@Nonnull
	public static CpuInfoFast i386(@Nonnull CpuInfoOther i386) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.i386;
		self.i386 = i386;
		return self;
	}

	@Nonnull
	public static CpuInfoFast lm32(@Nonnull CpuInfoOther lm32) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.lm32;
		self.lm32 = lm32;
		return self;
	}

	@Nonnull
	public static CpuInfoFast m68k(@Nonnull CpuInfoOther m68k) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.m68k;
		self.m68k = m68k;
		return self;
	}

	@Nonnull
	public static CpuInfoFast microblaze(@Nonnull CpuInfoOther microblaze) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.microblaze;
		self.microblaze = microblaze;
		return self;
	}

	@Nonnull
	public static CpuInfoFast microblazeel(@Nonnull CpuInfoOther microblazeel) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.microblazeel;
		self.microblazeel = microblazeel;
		return self;
	}

	@Nonnull
	public static CpuInfoFast mips(@Nonnull CpuInfoOther mips) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.mips;
		self.mips = mips;
		return self;
	}

	@Nonnull
	public static CpuInfoFast mips64(@Nonnull CpuInfoOther mips64) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.mips64;
		self.mips64 = mips64;
		return self;
	}

	@Nonnull
	public static CpuInfoFast mips64el(@Nonnull CpuInfoOther mips64el) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.mips64el;
		self.mips64el = mips64el;
		return self;
	}

	@Nonnull
	public static CpuInfoFast mipsel(@Nonnull CpuInfoOther mipsel) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.mipsel;
		self.mipsel = mipsel;
		return self;
	}

	@Nonnull
	public static CpuInfoFast moxie(@Nonnull CpuInfoOther moxie) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.moxie;
		self.moxie = moxie;
		return self;
	}

	@Nonnull
	public static CpuInfoFast nios2(@Nonnull CpuInfoOther nios2) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.nios2;
		self.nios2 = nios2;
		return self;
	}

	@Nonnull
	public static CpuInfoFast or1k(@Nonnull CpuInfoOther or1k) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.or1k;
		self.or1k = or1k;
		return self;
	}

	@Nonnull
	public static CpuInfoFast ppc(@Nonnull CpuInfoOther ppc) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.ppc;
		self.ppc = ppc;
		return self;
	}

	@Nonnull
	public static CpuInfoFast ppc64(@Nonnull CpuInfoOther ppc64) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.ppc64;
		self.ppc64 = ppc64;
		return self;
	}

	@Nonnull
	public static CpuInfoFast ppcemb(@Nonnull CpuInfoOther ppcemb) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.ppcemb;
		self.ppcemb = ppcemb;
		return self;
	}

	@Nonnull
	public static CpuInfoFast riscv32(@Nonnull CpuInfoOther riscv32) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.riscv32;
		self.riscv32 = riscv32;
		return self;
	}

	@Nonnull
	public static CpuInfoFast riscv64(@Nonnull CpuInfoOther riscv64) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.riscv64;
		self.riscv64 = riscv64;
		return self;
	}

	@Nonnull
	public static CpuInfoFast s390x(@Nonnull CpuInfoS390 s390x) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.s390x;
		self.s390x = s390x;
		return self;
	}

	@Nonnull
	public static CpuInfoFast sh4(@Nonnull CpuInfoOther sh4) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.sh4;
		self.sh4 = sh4;
		return self;
	}

	@Nonnull
	public static CpuInfoFast sh4eb(@Nonnull CpuInfoOther sh4eb) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.sh4eb;
		self.sh4eb = sh4eb;
		return self;
	}

	@Nonnull
	public static CpuInfoFast sparc(@Nonnull CpuInfoOther sparc) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.sparc;
		self.sparc = sparc;
		return self;
	}

	@Nonnull
	public static CpuInfoFast sparc64(@Nonnull CpuInfoOther sparc64) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.sparc64;
		self.sparc64 = sparc64;
		return self;
	}

	@Nonnull
	public static CpuInfoFast tricore(@Nonnull CpuInfoOther tricore) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.tricore;
		self.tricore = tricore;
		return self;
	}

	@Nonnull
	public static CpuInfoFast unicore32(@Nonnull CpuInfoOther unicore32) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.unicore32;
		self.unicore32 = unicore32;
		return self;
	}

	@Nonnull
	public static CpuInfoFast x86_64(@Nonnull CpuInfoOther x86_64) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.x86_64;
		self.x86_64 = x86_64;
		return self;
	}

	@Nonnull
	public static CpuInfoFast xtensa(@Nonnull CpuInfoOther xtensa) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.xtensa;
		self.xtensa = xtensa;
		return self;
	}

	@Nonnull
	public static CpuInfoFast xtensaeb(@Nonnull CpuInfoOther xtensaeb) {
		CpuInfoFast self = new CpuInfoFast();
		self.target = SysEmuTarget.xtensaeb;
		self.xtensaeb = xtensaeb;
		return self;
	}

	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("aarch64");
		names.add("alpha");
		names.add("arm");
		names.add("cris");
		names.add("hppa");
		names.add("i386");
		names.add("lm32");
		names.add("m68k");
		names.add("microblaze");
		names.add("microblazeel");
		names.add("mips");
		names.add("mips64");
		names.add("mips64el");
		names.add("mipsel");
		names.add("moxie");
		names.add("nios2");
		names.add("or1k");
		names.add("ppc");
		names.add("ppc64");
		names.add("ppcemb");
		names.add("riscv32");
		names.add("riscv64");
		names.add("s390x");
		names.add("sh4");
		names.add("sh4eb");
		names.add("sparc");
		names.add("sparc64");
		names.add("tricore");
		names.add("unicore32");
		names.add("x86_64");
		names.add("xtensa");
		names.add("xtensaeb");
		return names;
	}

	@JsonIgnore
	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("aarch64".equals(name))
			return aarch64;
		if ("alpha".equals(name))
			return alpha;
		if ("arm".equals(name))
			return arm;
		if ("cris".equals(name))
			return cris;
		if ("hppa".equals(name))
			return hppa;
		if ("i386".equals(name))
			return i386;
		if ("lm32".equals(name))
			return lm32;
		if ("m68k".equals(name))
			return m68k;
		if ("microblaze".equals(name))
			return microblaze;
		if ("microblazeel".equals(name))
			return microblazeel;
		if ("mips".equals(name))
			return mips;
		if ("mips64".equals(name))
			return mips64;
		if ("mips64el".equals(name))
			return mips64el;
		if ("mipsel".equals(name))
			return mipsel;
		if ("moxie".equals(name))
			return moxie;
		if ("nios2".equals(name))
			return nios2;
		if ("or1k".equals(name))
			return or1k;
		if ("ppc".equals(name))
			return ppc;
		if ("ppc64".equals(name))
			return ppc64;
		if ("ppcemb".equals(name))
			return ppcemb;
		if ("riscv32".equals(name))
			return riscv32;
		if ("riscv64".equals(name))
			return riscv64;
		if ("s390x".equals(name))
			return s390x;
		if ("sh4".equals(name))
			return sh4;
		if ("sh4eb".equals(name))
			return sh4eb;
		if ("sparc".equals(name))
			return sparc;
		if ("sparc64".equals(name))
			return sparc64;
		if ("tricore".equals(name))
			return tricore;
		if ("unicore32".equals(name))
			return unicore32;
		if ("x86_64".equals(name))
			return x86_64;
		if ("xtensa".equals(name))
			return xtensa;
		if ("xtensaeb".equals(name))
			return xtensaeb;
		return super.getFieldByName(name);
	}

	@JsonIgnore
	public boolean isValidUnion() {
		int count = 0;
		if (aarch64 != null)
			count++;
		if (alpha != null)
			count++;
		if (arm != null)
			count++;
		if (cris != null)
			count++;
		if (hppa != null)
			count++;
		if (i386 != null)
			count++;
		if (lm32 != null)
			count++;
		if (m68k != null)
			count++;
		if (microblaze != null)
			count++;
		if (microblazeel != null)
			count++;
		if (mips != null)
			count++;
		if (mips64 != null)
			count++;
		if (mips64el != null)
			count++;
		if (mipsel != null)
			count++;
		if (moxie != null)
			count++;
		if (nios2 != null)
			count++;
		if (or1k != null)
			count++;
		if (ppc != null)
			count++;
		if (ppc64 != null)
			count++;
		if (ppcemb != null)
			count++;
		if (riscv32 != null)
			count++;
		if (riscv64 != null)
			count++;
		if (s390x != null)
			count++;
		if (sh4 != null)
			count++;
		if (sh4eb != null)
			count++;
		if (sparc != null)
			count++;
		if (sparc64 != null)
			count++;
		if (tricore != null)
			count++;
		if (unicore32 != null)
			count++;
		if (x86_64 != null)
			count++;
		if (xtensa != null)
			count++;
		if (xtensaeb != null)
			count++;
		return (count == 1);
	}
}
